-- 5.join.sql

/*
1. 조인이란?
	다수의 table간에  공통된 데이터를 기준으로 검색하는 명령어
	다수의 table이란?
		동일한 table을 논리적으로 다수의 table로 간주
			self-join
		물리적으로 다른 table간의 조인


2. 사용 table 
	1. emp & dept 
	  : deptno 컬럼을 기준으로 연관되어 있음

	 2. emp & salgrade
	  : sal 컬럼을 기준으로 연관되어 있음


3. table에 별칭 사용 
	검색시 다중 table의 컬럼명이 다를 경우 table별칭 사용 불필요, 
	서로 다른 table간의 컬럼명이 중복된 경우,
	컬럼 구분을 위해 오라클 엔진에게 정확한 table 소속명을 알려줘야 함
	- table명 또는 table별칭
	- 주의사항 : 컬럼별칭 as[옵션], table별칭 as 사용 불가


4. 조인 종류 
	1. 동등 조인
		 = 동등비교 연산자 사용
		 : 사용 빈도 가장 높음
		 : 테이블에서 같은 조건이 존재할 경우의 값 검색 

	2. not-equi 조인
		: 100% 일치하지 않고 특정 범위내의 데이터 조인시에 사용
		: between ~ and(비교 연산자)

	3. self 조인 
		: 동일 테이블 내에서 진행되는 조인
		: 동일 테이블 내에서 상이한 칼럼 참조
			emp의 empno[사번]과 mgr[사번] 관계

	4. outer 조인 
		: 두개 이상의 테이블이 조인될때 특정 데이터가 모든 테이블에 존재하지 않고 컬럼은 존재하나 null값을 보유한 경우
		  검색되지 않는 문제를 해결하기 위해 사용되는 조인
		  null 값이기 때문에 배제된 행을 결과에 포함 할 수 있드며 (+) 기호를 조인 조건에서 정보가 부족한 컬럼쪽에 적용		
		: oracle DB의 sql인 경우 데이터가 null 쪽 table 에 + 기호 표기 */

-- 1. dept table의 구조 검색
desc dept;
-- dept table의 모든 데이터 검색
select * from dept;



--*** 1. 동등 조인 ***
-- =동등 비교
-- 2. SMITH 의 이름, 사번, 근무지역(부서위치) 정보를 검색
/* SMITH - emp, 사번(empno) - emp
    근무지역(loc) - dept
    공통 접점: deptno
*/
-옳은 문장
select ename, empno, loc
from emp, dept
where ename = 'SMITH' and emp.deptno=dept.deptno;

-틀린 문장
select ename, empno, loc
from emp, dept
where ename = 'SMITH' and deptno=deptno;
-> 오류:deptno는 두개의 tabld에 중복. 따라서 명확하게 어떤 table의 컬럼인지 명시 필수

--table에 별칭 반영해서 사용
select ename, empno, loc
from emp e, dept d
where ename = 'SMITH' and e.deptno=d.deptno;

-- 3. deptno가 동일한 모든 데이터 검색
--emp와 dept
--deptno가 두번 검색되는, 즉 table 수 만큼 검색되는 단점 발생
--해결책 : 개별 컬럼명 명시, deptno는 emp.deptno 또는 dept.deptno로 검색해야 함

select * from emp e, dept d where e.deptno=d.deptno;

-- 4. 2+3 번 항목 결합해서 SMITH에 대한 모든 정보 검색하기

select * from emp e, dept d where ename='SMITH' AND e.deptno=d.deptno;

-- 5.  SMITH에 대한 이름(ename)과 부서번호(deptno), 부서명(dept의 dname) 검색하기

select ename, d.deptno, d.dname from emp e, dept d where ename='SMITH' and e.deptno=d.deptno;


-- 6. 조인을 사용해서 뉴욕에 근무하는 사원의 이름과 급여를 검색 
-- loc='NEW YORK', ename, sal

select ename 이름, sal 급여, loc 지역 from emp e, dept d where loc='NEW YORK' and e.deptno=d.deptno;

내꺼
select e.ename,e.sal,d.loc
from emp e,dept d
where e.deptno=d.deptno and d.deptno=10;
-- 7. 조인 사용해서 ACCOUNTING 부서(dname)에 소속된 사원의 이름과 입사일 검색

내꺼
select e.ename, e.hiredate,d.dname
from emp e,dept d
where d.deptno=e.deptno and d.deptno=10;



select ename, hiredate, dname from emp e, dept d where dname='ACCOUNTING';

-- 8. 직급이 MANAGER인 사원의 이름, 부서명 검색

select ename, dname, job from emp e, dept d where job='MANAGER' and e.deptno=d.deptno;



-- *** 2. not-equi 조인 ***

-- salgrade table(급여 등급 관련 table)
-- 9. 사원의 급여가 몇 등급인지 검색
-- between ~ and 

select ename, grade from emp e, salgrade s where e.sal between s.losal and s.hisal;



--? 등급이 3등급인 사원들의 이름과 급여 검색


select ename, sal from emp, salgrade where grade=3 and sal between losal and hisal;

-- 10. 사원(emp) 테이블의 부서 번호(deptno)로 부서 테이블을 참조하여 사원명, 부서번호, 부서의 이름(dname) 검색

 select ename, d.deptno, dname from emp e, dept d where d.deptno=e.deptno;


-- *** 3. self 조인 ***

-- 11. SMITH 직원의 메니저 이름 검색
-- 직원 table : emp e[ename, empno, mgr]
-- 메니저 table : emp m[empno, ename]

select e.ename 직원명, m.ename 매니저명
from emp e, emp m
where e.ename='SMITH' and e.mgr=m.empno;

--12. 메니저가 KING인 사원들의 이름과 직급 검색
-- m : ename = 'KING'
-- e : ename, job

select e.ename, e.job from emp e, emp m where m.ename='KING' and e.mgr=m.empno;

--13. SMITH와 동일한 근무지에서 근무하는 사원의 이름 검색
--SMITH 데이터 절대 검색 불가
-- SMITH동일 근무지 - deptno로 검색
-- deptno가 일치되는 사원의 이름 -  ename

select e.ename 
from emp e, emp p
where p.ename='SMITH' 
and p.deptno=e.deptno 
and e.ename!='SMITH';

내 답
select e.ename 
from emp e, emp m, dept d 
where m.ename='SMITH' 
and e.deptno=d.deptno 
and e.deptno=m.deptno 
and e.ename!='SMITH';

select e.ename
강사님 답
select m.ename 
from emp e, emp m
where e.ename = 'SMITH'
and e.deptno=m.deptno
and m.ename <> 'SMITH';

--*** 4. outer join ***
	
-- 14. 모든 사원명, 메니저 명 검색, 단 메니저가 없는 사원도 검색되어야 함
-- null값을 포함한 검색도 반드시 필수
/*empno - 사원번호(12개 즉 직원수 만큼 존재)
   mgr - 매니저 번호(실제 사용 가능한 데이터는 null을 제외한 11개)
   	  - null이라는 데이터는 empno에는 미존재
   e.mgr = e.empno(+)
	- 사원의 mgr(e.mgr) - null 또는 4자리 정수값
	- 매니저의 empno(m.empno) - 4자리 정수값만
	- +기호는 데이터 표현이 부족한 쪽에 표기해준다.


*/************이해하기힘듬
--e.mgr은 빈값을 포함하고 그에 해당하는 m.empno는 빈값을 제외한 empno만 갖기때문에 m.empno에 (+)
select e.ename 사원, m.ename 매니저,m.empno,e.mgr
from emp e, emp m
where e.mgr=m.empno(+);


-- 15. 모든 직원명, 부서번호, 부서명 검색
-- 부서 테이블의 40번 부서와 조인할 사원 테이블의 분서 번호가 없지만,
-- outer join이용해서 40번 부서의 부서 이름도 검색하기 

내꺼
select e.ename,d.deptno,d.dname
from emp e, dept d
where e.deptno(+)=d.deptno;



select e.ename, d.deptno, d.dname 
from emp e, dept d 
where e.deptno(+)=d.deptno;


-- *** hr/hr 계정에서 test
--16. 직원의 이름과 직책(job_title)을 출력(검색)
--	단, 사용되지 않는 직책이 있다면 그 직책의 정보도 검색에 포함
--	검색 정보 이름(2개)들과 job_title(직책)
-- employees, jobs 이용하기

select e.first_name,e.last_name,j.job_title
from employees e, jobs j
where j.job_id=e.job_id(+);



select e.first_name, e.last_name, j.job_title
from employees e, jobs j
where e.job_id(+)=j.job_id;

--17. 직원들의 이름(first_name), 입사일, 부서명 검색하기
-- 단, 부서가 없는 직원이 있다면 그 직원의 정보도 검색에 포함시키기
desc employees;
desc departments;
검색해보고 참고해보면서 생각






select e.first_name, e.hire_date, d.department_name
from employees e, departments d
where e.department_id=d.department_id(+);
