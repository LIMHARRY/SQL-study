--9.integrity.sql
--DB 자체적으로 강제적인 제약사항 설정
--개발자 능력 + 시스템(HW/SW) 다 유기적으로 연계
--설정은 개발자의 책임


/* 학습내용
*** 하나의 db 시스템에서 모든 제약조건은 
		관리자들이 쉽게 확인가능하게 설계하는게 좋다
		- 제약조건은 사용자 정의명으로 지정하는게 더 효과적일듯
		
1. table 생성시 제약조건을 설정하는 기법 

2. 제약 조건 종류
	emp와 dept의 관계
	 - dept의 deptno를 emp의 deptno에서 참조(reference)
	 - 강제사항
		emp의 deptno(부서번호)는 절대적으로 dept table에 있는 값에 한해서만 insert 가능
		emp의 검색 기준인 empno는 중복 불가
		dept의 deptno도 중복 불가

	- 관계
		상속, 관계가 있는 연관성의 표현
		파이썬, 자바 즉 프로그램 언어에도 상속관계 형성(부모 클래스(super), 자식 클래스(sub))
		DB 파트에선 주종 관계로 표현(주: 부모, 종: 자식)
			: dept -주
			   emp -종


	2-1. PK[primary key] - 기본키, 중복불가, null불가, 데이터들 구분을 위한 핵심 데이터
			: not null + unique
	2-2. not null - 반드시 데이터 존재
	2-3. unique - 중복 불가
	2-4. check - table 생성시 규정한 범위의 데이터만 저장 가능 
	2-5. default - insert시에 특별한 데이터 미저장시에도 자동 저장되는 기본 값
					- 자바 관점에는 멤버 변수 선언 후 객체 생성 직후 멤버 변수 기본값으로 초기화
	2-6. FK[foreign key] 
		- 외래키[참조키], 다른 table의 pk를 참조하는 데이터 
		- table간의 주종 관계가 형성
		- pk 보유 table이 부모, 참조하는 table이 자식
		- 부모의 미 존재하는 데이터를 자식에서 새로 생성가능? 불가 
		- 자식 table들이 존재할 경우 부모table만 삭제 가능? 불가
			- 해결책 : 관계를 해제도 가능하나 가급적 분석설계시 완벽하리만큼 고민후 설계
	

3. 사용자가 정의하는 제약조건에 제약조건명 명시하는 방법
	3-1. oracle engine이 기본적으로 설정
		- 사용자가 제약 조건에 별도의 이름을 부여하지 않으면 오라클 자체적으로 SYS_시작하는 이름을 자동 부여
		- SYS_Xxxx

	3-2. sql개발자가 직접 설정
		- table명_컬럼명_제약조건명등 기술..단 순서는 임의 변경 가능
			: dept의 deptno이 제약조건명
				PK_DEPT
				PK_dept_deptno
		- 약어 사용도 가능[분석, 설계시 용어사전 제시후 작성 권장]
	
4. 제약조건 선언 위치
	4-1. 컬럼 레벨 단위
		- 컬럼선언 라인에 제약조건 설정 
	4-2. 테이블 레벨 단위 
		- 모든 컬럼 선언 직후 별도로 제약조건 설정 
	
5. 오라클 자체 특별한 table
	5-1. user_constraints
		- 제약조건 정보 보유 table
		- 개발자가 table의 데이터값 직접 수정 불가
		- select constraint_name, constraint_type, table_name 
			from user_constraints;

6. 이미 존재하는 table의 제약조건 수정(추가, 삭제)명령어
	6-1. 제약조건 추가
		 table 테이블명 add constraint 제약조건명 제약조건(컬럼명);
		alter table dept01 add constraint dept01_deptno_pk primary key(deptno);
		
	6-2. 제약조건 삭제(drop)
		- table삭제 
		alter table 테이블명 cascade constraint;
		
		alter table 테이블명 drop 제약조건;
		alter table dept01 drop primary key;
		
	6-3. 제약조건 임시 비활성화
		alter table emp01 disable constraint emp01_deptno_fk;

	6-4. 제약조건 활성화
		alter table emp01 enable constraint emp01_deptno_fk;
	
*/
--1. 오라클 db에 설정한 table의 제약조건 정보를 보유하고 있는
-- 오라클 자체 table 검색하기 :  user_constraints
-- db 자체적으로 사전과 같은 table
-- 사용자가 insert/update/delete 불가
-- 사용자가 sql문장 작성시 table명을 소문자로 하여도 대문자로 변경해서 관리(upper())

select * from user_constraints;
desc user_constraints;


/* constraint_type : 제약조건 정보 컬럼
	P : 기본키, Primary key, 주키
		가령 : 고객 table에는 id
			제품 talbe에서는 제품번호
			...
	R : 참조 or 관계 (reference or relation) 


select  CONSTRAINT_TYPE, table_name 
from user_constraints;


-- 사전 table의 이름은 대문자로 저장
-- 소문자로 검색 불가
select constraint_name, constraint_type, table_name 
from user_constraints 
where table_name = 'EMP';



--2. 사용자 정의 제약조건명 명시하기
/* 이미 존재하는 table 기반으로 table 생성시 구조와 데이터는 100% 복제가 되나, 제약조건은 반영되지 않음
제약조건이 필요한 경우 추가 설정 필수
*/
drop table emp02;

-- create, 컬럼에 제약조건명 명시
create table emp02(
	empno number(4) constraint emp02_empno_nn not null, ename varchar2(10)
);

select constraint_name, constraint_type, table_name
from user_constraints where table_name='EMP02';

insert into emp02 values(1, 'tester');
--=>정상출력
insert into emp02 (ename) values('master');
--=>오류 발생

--3. 사용자 정의 제약조건명 설정 후 위배시 출력되는 메세지에 사용자정의 제약조건명
	-- 확인 가능 : not NULL을 제외한 제약조건명은 에러 발생시 가시적인 확인 가능
drop table emp02;

create table emp02(
	empno number(4) constraint emp02_empno_u unique,
	ename varchar2(10)
);

insert into emp02 values(1, 'tester');
insert into emp02 values(1, 'master');
--=> 에러발생: '1' 중복 불허! (unique)

--4. 제약조건명을 오라클 엔진이 자동적으로 지정
	-- 에러 발생시 SYS_xxxx로 출력됨 
drop table emp02;
create table emp02(
	empno number(4)  unique,
	ename varchar2(10)
);

select constraint_name, constraint_type, table_name
from user_constraints where table_name='EMP02';

insert into emp02 values(1, 'tester');
insert into emp02 values(1, 'master');
-- 에러 발생!


--5. pk설정 : 선언 위치에 따른 구분 학습
	-- 컬럼 레벨단위 
drop table emp02;

create table emp02(
	empno number(4) constraint emp02_pk primary key ,
	ename varchar2(10)
);

insert into emp02 values(1, 'tester');
insert into emp02 values(1, 'master');


	-- table 레벨 단위 
drop table emp02;

create table emp02(
	empno number(4) ,
	ename varchar2(10),
	constraint emp02_pk primary key(empno)
);

insert into emp02 values(1, 'tester');
insert into emp02 values(1, 'master');




--6. 외래키[참조키]
-- 이미 제약조건이 설정된 dept table의 pk컬럼인 deptno값을 기준으로 emp02의 deptno에도 반영(참조키, 외래키, FK)
/* emp02, table 생성시 필요 정보
1. 주 table명, 주 table의 어떤 컬럼을 참조할 것인지?
2. emp02 table의 어떤 컬럼과 연관 작업?
3. 컬럼레벨? 테이블레벨?
4. 사용자 정의 이름? 오라클 자체적인 이름?
*/

--컬럼 레벨 단위
drop table emp02;

create table emp02(
	empno number(4) primary key,
	ename varchar2(10),
	deptno number(4) constraint emp02_deptno_fk references
	dept(deptno)
	);

insert into emp02 values(1, 'tester', 10);
--insert into emp02 values(2, 'master', 50); //불가
select * from emp02;

-- drop table dept;//emp01의 컬럼에서 참조하는 데이터 존재하는한 삭제 불가 


--7. 6번의 내용을 table 레벨 단위로 설정해 보기
drop table emp02;

create table emp02(
	empno number(4) primary key,
	ename varchar2(10),
	deptno number(4),
	constraint emp02_deptno_fk foreign key(deptno) references
	dept(deptno)
	);


insert into emp02 values(1, 'tester', 10);
insert into emp02 values(2, 'master', 60);


--8.?
/* emp01과 dept01 table 생성
*** as로 기존 table 복제할 경우엔 제약조건은 반영되지 않음
따라서 alter 명령어로 추가 적용 필수

단, dept01은 deptno가 pk여야만 함
test 데이터 2개 정도만 저장
emp01은 dept01의 deptno를 참조 
단, 제약조건명 명시, 제약조건 테이블 레벨 단위로 개발 
*/ 

drop table dept01;
drop table emp01;
create table dept01 as select * from dept;
create table emp01 as select * from emp;




--9. 이미 존재하는 table에 제약조건 추가하는 명령어 
--dept01에 먼저 설정
alter table dept01 add constraint dept01_deptno_pk primary key(deptno);

select table_name, constraint_type, constraint_name
from user_constraints 
where table_name='DEPT01';

/* dept01의 deptno를 emp01의 deptno에서 참조
어떤 table부터 제약조건 추가?
*/

--? emp01에 제약조건 추가해 보기

select table_name, constraint_type, constraint_name
from user_constraints where table_name='EMP01';

--10. 참조 당하는 key의 컬럼이라 하더라도 자식 table에서 미 사용되는 데이터에 한해서는
	-- 삭제 가능  
-- emp01이 이미 참조하는 데이터가 있는 dept01 table 삭제해보기 
	-- 8+9의 sql문장 유지 
-- drop table dept01;  //삭제 불가
-- delete from dept01 where deptno=30; //삭제 불가 
delete from dept01 where deptno=40; --삭제 ok



--11.참조되는 컬럼 데이터라 하더라도 삭제 가능한 명령어
	--11-1-1. 자식 table의 제약조건을 비활성화 : emp01의 제약조건 비활성
	select table_name, constraint_type, constraint_name
	from user_constraints where table_name='EMP01';
	
	alter table emp01 disable constraint emp01_deptno_fk;
	delete from dept01;	//제약조건 이름이 있어야 함
	-- drop table dept01; 비활성화 되더라도 부모 table삭제 불가 
	select table_name, constraint_type, constraint_name
	from user_constraints where table_name='EMP01';
	
	-- 11-1-2. 비활성화된 자식 table의 제약조건 활성화
	insert into dept01 select * from dept;
	alter table emp01 enable constraint emp01_deptno_fk;
	select * from emp01;
	delete from dept01;
	
	select table_name, constraint_type, constraint_name
	from user_constraints;	
	
	--*** 현업에선 부득이하게 이미 개발중에 table 구조를 변경해야 할 경우가 간혹 발생
	--11-2. 자식 존재 유무 완전 무시하고 부모 table삭제 
	drop table dept01 cascade constraint;

	

--12. check : if 조건식과 같이 저장직전의 데이터의 유효 유무 검증하는 제약조건 
-age값이 1~100까지만 DB에 저장

drop table emp01;

create table emp01(
	ename varchar2(10),
	age number(3) constraint emp01_age_ck check(age between 1 and 100)
);



insert into emp01 values('master', 10);
insert into emp01 values('master', 102);
select * from emp01;

select table_name, constraint_type, constraint_name
	from user_constraints where table_name='EMP01';

-- 13.? gender라는 컬럼에는 데이터가 M 또는 F만 저장되어야 함
drop table emp01;

create table emp01(
	ename varchar2(10),
	gender varchar2(2) s
	);

insert into emp01 values('master', 'F');
-- insert into emp01 values('master', 'T'); //불가 
select * from emp01;


--14. default : insert시에 데이터를 생략해도 자동으로 db에 저장되는 기본값 
drop table emp01;

create table emp01(
	id varchar2(10) primary key,
	gender char(1) default 'F');

insert into emp01 (id) values('master');
insert into emp01 values('tester', 'M');
select * from emp01;


--------------------------------------------------
(Movie, Actor, Director Tables 관련)
table drop 순서
1. 참조하는 자식 table 부터 drop
2. (주-종 관계 파악이 되지 않았을 경우) cascade constraint 문장으로 관계를 무시하고 drop
	
	